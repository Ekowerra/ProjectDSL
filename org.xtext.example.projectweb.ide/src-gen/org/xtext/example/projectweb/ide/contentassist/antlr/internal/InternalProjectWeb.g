/*
 * generated by Xtext 2.10.0
 */
grammar InternalProjectWeb;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.projectweb.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.projectweb.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.projectweb.services.ProjectWebGrammarAccess;

}
@parser::members {
	private ProjectWebGrammarAccess grammarAccess;

	public void setGrammarAccess(ProjectWebGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleprogramWeb
entryRuleprogramWeb
:
{ before(grammarAccess.getProgramWebRule()); }
	 ruleprogramWeb
{ after(grammarAccess.getProgramWebRule()); } 
	 EOF 
;

// Rule programWeb
ruleprogramWeb 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramWebAccess().getGroup()); }
		(rule__ProgramWeb__Group__0)
		{ after(grammarAccess.getProgramWebAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaration
entryRuleDeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getGroup()); }
		(rule__Declaration__Group__0)
		{ after(grammarAccess.getDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFonction
entryRuleFonction
:
{ before(grammarAccess.getFonctionRule()); }
	 ruleFonction
{ after(grammarAccess.getFonctionRule()); } 
	 EOF 
;

// Rule Fonction
ruleFonction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFonctionAccess().getAlternatives()); }
		(rule__Fonction__Alternatives)
		{ after(grammarAccess.getFonctionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContent
entryRuleContent
:
{ before(grammarAccess.getContentRule()); }
	 ruleContent
{ after(grammarAccess.getContentRule()); } 
	 EOF 
;

// Rule Content
ruleContent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContentAccess().getAlternatives()); }
		(rule__Content__Alternatives)
		{ after(grammarAccess.getContentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProc
entryRuleProc
:
{ before(grammarAccess.getProcRule()); }
	 ruleProc
{ after(grammarAccess.getProcRule()); } 
	 EOF 
;

// Rule Proc
ruleProc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcAccess().getGroup()); }
		(rule__Proc__Group__0)
		{ after(grammarAccess.getProcAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWithNav
entryRuleWithNav
:
{ before(grammarAccess.getWithNavRule()); }
	 ruleWithNav
{ after(grammarAccess.getWithNavRule()); } 
	 EOF 
;

// Rule WithNav
ruleWithNav 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWithNavAccess().getGroup()); }
		(rule__WithNav__Group__0)
		{ after(grammarAccess.getWithNavAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGoto
entryRuleGoto
:
{ before(grammarAccess.getGotoRule()); }
	 ruleGoto
{ after(grammarAccess.getGotoRule()); } 
	 EOF 
;

// Rule Goto
ruleGoto 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGotoAccess().getGroup()); }
		(rule__Goto__Group__0)
		{ after(grammarAccess.getGotoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFonctionAccess().getGroup_0()); }
		(rule__Fonction__Group_0__0)
		{ after(grammarAccess.getFonctionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionAccess().getGroup_1()); }
		(rule__Fonction__Group_1__0)
		{ after(grammarAccess.getFonctionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Alternatives_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFonctionAccess().getSTRINGTerminalRuleCall_0_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getFonctionAccess().getSTRINGTerminalRuleCall_0_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionAccess().getIDTerminalRuleCall_0_2_1()); }
		RULE_ID
		{ after(grammarAccess.getFonctionAccess().getIDTerminalRuleCall_0_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContentAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getContentAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getContentAccess().getFonctionParserRuleCall_1()); }
		ruleFonction
		{ after(grammarAccess.getContentAccess().getFonctionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramWeb__Group__0__Impl
	rule__ProgramWeb__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramWebAccess().getDeclarationsAssignment_0()); }
	(rule__ProgramWeb__DeclarationsAssignment_0)*
	{ after(grammarAccess.getProgramWebAccess().getDeclarationsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramWeb__Group__1__Impl
	rule__ProgramWeb__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramWebAccess().getNavAssignment_1()); }
	(rule__ProgramWeb__NavAssignment_1)
	{ after(grammarAccess.getProgramWebAccess().getNavAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramWeb__Group__2__Impl
	rule__ProgramWeb__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramWebAccess().getGotoAssignment_2()); }
	(rule__ProgramWeb__GotoAssignment_2)
	{ after(grammarAccess.getProgramWebAccess().getGotoAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramWeb__Group__3__Impl
	rule__ProgramWeb__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramWebAccess().getIfAssignment_3()); }
	(rule__ProgramWeb__IfAssignment_3)*
	{ after(grammarAccess.getProgramWebAccess().getIfAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramWeb__Group__4__Impl
	rule__ProgramWeb__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramWebAccess().getFonctionAssignment_4()); }
	(rule__ProgramWeb__FonctionAssignment_4)*
	{ after(grammarAccess.getProgramWebAccess().getFonctionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramWeb__Group__5__Impl
	rule__ProgramWeb__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramWebAccess().getProcAssignment_5()); }
	(rule__ProgramWeb__ProcAssignment_5)*
	{ after(grammarAccess.getProgramWebAccess().getProcAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramWeb__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramWebAccess().getSemicolonKeyword_6()); }
	';'
	{ after(grammarAccess.getProgramWebAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getDeclarationAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__1__Impl
	rule__Declaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getVariableParserRuleCall_1()); }
	ruleVariable
	{ after(grammarAccess.getDeclarationAccess().getVariableParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getGroup_2()); }
	(rule__Declaration__Group_2__0)?
	{ after(grammarAccess.getDeclarationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group_2__0__Impl
	rule__Declaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getEqualsSignKeyword_2_0()); }
	'='
	{ after(grammarAccess.getDeclarationAccess().getEqualsSignKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getContentParserRuleCall_2_1()); }
	ruleContent
	{ after(grammarAccess.getDeclarationAccess().getContentParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group_0__0__Impl
	rule__Fonction__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
	{ after(grammarAccess.getFonctionAccess().getIDTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group_0__1__Impl
	rule__Fonction__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getLeftParenthesisKeyword_0_1()); }
	'('
	{ after(grammarAccess.getFonctionAccess().getLeftParenthesisKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group_0__2__Impl
	rule__Fonction__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getAlternatives_0_2()); }
	(rule__Fonction__Alternatives_0_2)
	{ after(grammarAccess.getFonctionAccess().getAlternatives_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group_0__3__Impl
	rule__Fonction__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getGroup_0_3()); }
	(rule__Fonction__Group_0_3__0)*
	{ after(grammarAccess.getFonctionAccess().getGroup_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getRightParenthesisKeyword_0_4()); }
	')'
	{ after(grammarAccess.getFonctionAccess().getRightParenthesisKeyword_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group_0_3__0__Impl
	rule__Fonction__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getCommaKeyword_0_3_0()); }
	','
	{ after(grammarAccess.getFonctionAccess().getCommaKeyword_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getVariableParserRuleCall_0_3_1()); }
	ruleVariable
	{ after(grammarAccess.getFonctionAccess().getVariableParserRuleCall_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fonction__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group_1__0__Impl
	rule__Fonction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getIDTerminalRuleCall_1_0()); }
	RULE_ID
	{ after(grammarAccess.getFonctionAccess().getIDTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fonction__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fonction__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFonctionAccess().getLeftParenthesisRightParenthesisKeyword_1_1()); }
	'()'
	{ after(grammarAccess.getFonctionAccess().getLeftParenthesisRightParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	'if('
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getFonctionParserRuleCall_1()); }
	ruleFonction
	{ after(grammarAccess.getIfAccess().getFonctionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getIfAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getDoKeyword_3()); }
	'do'
	{ after(grammarAccess.getIfAccess().getDoKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__4__Impl
	rule__If__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getFonctionParserRuleCall_4()); }
	(ruleFonction)*
	{ after(grammarAccess.getIfAccess().getFonctionParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__5__Impl
	rule__If__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getProcParserRuleCall_5()); }
	(ruleProc)*
	{ after(grammarAccess.getIfAccess().getProcParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getEndKeyword_6()); }
	'end'
	{ after(grammarAccess.getIfAccess().getEndKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Proc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Proc__Group__0__Impl
	rule__Proc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcAccess().getProcKeyword_0()); }
	'Proc'
	{ after(grammarAccess.getProcAccess().getProcKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Proc__Group__1__Impl
	rule__Proc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getProcAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Proc__Group__2__Impl
	rule__Proc__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getProcAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Proc__Group__3__Impl
	rule__Proc__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcAccess().getGotoParserRuleCall_3()); }
	(ruleGoto)?
	{ after(grammarAccess.getProcAccess().getGotoParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Proc__Group__4__Impl
	rule__Proc__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcAccess().getFonctionParserRuleCall_4()); }
	(ruleFonction)*
	{ after(grammarAccess.getProcAccess().getFonctionParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Proc__Group__5__Impl
	rule__Proc__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcAccess().getDeclarationParserRuleCall_5()); }
	(ruleDeclaration)*
	{ after(grammarAccess.getProcAccess().getDeclarationParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Proc__Group__6__Impl
	rule__Proc__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcAccess().getProcParserRuleCall_6()); }
	(ruleProc)*
	{ after(grammarAccess.getProcAccess().getProcParserRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Proc__Group__7__Impl
	rule__Proc__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcAccess().getReturnKeyword_7()); }
	'return'
	{ after(grammarAccess.getProcAccess().getReturnKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Proc__Group__8__Impl
	rule__Proc__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcAccess().getVariableParserRuleCall_8()); }
	ruleVariable
	{ after(grammarAccess.getProcAccess().getVariableParserRuleCall_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Proc__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Proc__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcAccess().getSemicolonKeyword_9()); }
	';'
	{ after(grammarAccess.getProcAccess().getSemicolonKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WithNav__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WithNav__Group__0__Impl
	rule__WithNav__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WithNav__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWithNavAccess().getWithKeyword_0()); }
	'with'
	{ after(grammarAccess.getWithNavAccess().getWithKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WithNav__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WithNav__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WithNav__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWithNavAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getWithNavAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Goto__Group__0__Impl
	rule__Goto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGotoAccess().getGotoKeyword_0()); }
	'goto'
	{ after(grammarAccess.getGotoAccess().getGotoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Goto__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGotoAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getGotoAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProgramWeb__DeclarationsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramWebAccess().getDeclarationsDeclarationParserRuleCall_0_0()); }
		ruleDeclaration
		{ after(grammarAccess.getProgramWebAccess().getDeclarationsDeclarationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__NavAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramWebAccess().getNavWithNavParserRuleCall_1_0()); }
		ruleWithNav
		{ after(grammarAccess.getProgramWebAccess().getNavWithNavParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__GotoAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramWebAccess().getGotoGotoParserRuleCall_2_0()); }
		ruleGoto
		{ after(grammarAccess.getProgramWebAccess().getGotoGotoParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__IfAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramWebAccess().getIfIfParserRuleCall_3_0()); }
		ruleIf
		{ after(grammarAccess.getProgramWebAccess().getIfIfParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__FonctionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramWebAccess().getFonctionFonctionParserRuleCall_4_0()); }
		ruleFonction
		{ after(grammarAccess.getProgramWebAccess().getFonctionFonctionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramWeb__ProcAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramWebAccess().getProcProcParserRuleCall_5_0()); }
		ruleProc
		{ after(grammarAccess.getProgramWebAccess().getProcProcParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
