/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.projectweb.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.projectweb.ide.contentassist.antlr.internal.InternalProjectWebParser;
import org.xtext.example.projectweb.services.ProjectWebGrammarAccess;

public class ProjectWebParser extends AbstractContentAssistParser {

	@Inject
	private ProjectWebGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalProjectWebParser createParser() {
		InternalProjectWebParser result = new InternalProjectWebParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFonctionAccess().getAlternatives(), "rule__Fonction__Alternatives");
					put(grammarAccess.getFonctionAccess().getAlternatives_0_2(), "rule__Fonction__Alternatives_0_2");
					put(grammarAccess.getContentAccess().getAlternatives(), "rule__Content__Alternatives");
					put(grammarAccess.getProgramWebAccess().getGroup(), "rule__ProgramWeb__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup_2(), "rule__Declaration__Group_2__0");
					put(grammarAccess.getFonctionAccess().getGroup_0(), "rule__Fonction__Group_0__0");
					put(grammarAccess.getFonctionAccess().getGroup_0_3(), "rule__Fonction__Group_0_3__0");
					put(grammarAccess.getFonctionAccess().getGroup_1(), "rule__Fonction__Group_1__0");
					put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
					put(grammarAccess.getProcAccess().getGroup(), "rule__Proc__Group__0");
					put(grammarAccess.getWithNavAccess().getGroup(), "rule__WithNav__Group__0");
					put(grammarAccess.getGotoAccess().getGroup(), "rule__Goto__Group__0");
					put(grammarAccess.getProgramWebAccess().getDeclarationsAssignment_0(), "rule__ProgramWeb__DeclarationsAssignment_0");
					put(grammarAccess.getProgramWebAccess().getNavAssignment_1(), "rule__ProgramWeb__NavAssignment_1");
					put(grammarAccess.getProgramWebAccess().getGotoAssignment_2(), "rule__ProgramWeb__GotoAssignment_2");
					put(grammarAccess.getProgramWebAccess().getIfAssignment_3(), "rule__ProgramWeb__IfAssignment_3");
					put(grammarAccess.getProgramWebAccess().getFonctionAssignment_4(), "rule__ProgramWeb__FonctionAssignment_4");
					put(grammarAccess.getProgramWebAccess().getProcAssignment_5(), "rule__ProgramWeb__ProcAssignment_5");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalProjectWebParser typedParser = (InternalProjectWebParser) parser;
			typedParser.entryRuleprogramWeb();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ProjectWebGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ProjectWebGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
